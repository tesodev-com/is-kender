stages:
  - publish_npm
  - build-and-push
  - deployment

variables:
  NODE_ENV: "production"
  IMAGE_TAG: "v.0.${CI_PIPELINE_IID}"
  R2_SECRET_ACCESS_KEY: "${R2_SECRET_ACCESS_KEY}"
  R2_ACCESS_KEY_ID: "${R2_ACCESS_KEY_ID}"
  DEPLOYMENT_NAME: "component-library-storybook"
  CDN_PROJECT_NAME: "component-library-storybook"
  IMAGE_URL: "gitlab.tesodev.com:5050/boilerplates/component-library:v.0.${CI_PIPELINE_IID}"
  BUILD_FILES_PATH: "."
  PORT: "3010"

.deploy: &deploy |
  kubectl create secret docker-registry gitlab-registry-component-library-storybook --docker-server=$CI_REGISTRY --docker-username=$registry_user --docker-password=$registry_pass --dry-run -o yaml | kubectl apply -f -
  cat ${BUILD_FILES_PATH}/deployment.yaml | envsubst | kubectl apply --record=true -f -
  cat ${BUILD_FILES_PATH}/service.yaml | envsubst | kubectl apply -f - || echo "Jobs doesnt have service, skiping..."

build_test:
  stage: build-and-push
  tags:
    - shell
  script:
    - docker login -u "gitlab-ci-token" -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --build-arg NODE_ENV=${NODE_ENV} --build-arg CONF_ENV=test --build-arg R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY} --build-arg R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID} --build-arg IMAGE_TAG=${IMAGE_TAG} --build-arg CDN_PROJECT_NAME=${CDN_PROJECT_NAME} -f ${BUILD_FILES_PATH}/Dockerfile -t ${IMAGE_URL} .
    - echo "Pushing image..."
    - docker push ${IMAGE_URL} && echo "Success"
  retry:
    max: 2
    when: runner_system_failure
  only:
    - master
  timeout: 10 minutes
  when: manual
  allow_failure: false

deploy_to_test:
  stage: deployment
  variables:
    ENV: "test"
    NODE_ENV: "production"
    CONF_ENV: "test"
    REPLICA_COUNT: "1"
    NODE_PORT: "30312"
  tags:
    - shell
  script:
    - *deploy
  only:
    - master
  timeout: 10 minutes
  when: manual
  environment:
    name: k8s-rs-pp/${DEPLOYMENT_NAME}
    kubernetes:
      namespace: test
  after_script:
    - kubectl rollout status deployments/${DEPLOYMENT_NAME}-test
  allow_failure: false

publish_npm:
  stage: publish_npm
  image: node:22.11-bullseye-slim
  tags:
    - shell
  rules:
    - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "push"
      changes:
        - package.json
      when: always
  script:
    - npm ci
    - npm run build
    # If no .npmrc is included in the repo, generate a temporary one that is configured to publish to GitLab's NPM registry
    - |
      if [[ ! -f .npmrc ]]; then
        echo 'No .npmrc found! Creating one now. Please review the following link for more information: https://docs.gitlab.com/ee/user/packages/npm_registry/#with-the-npmrc-file'
        {
          echo "//gitlab.tesodev.com/api/v4/packages/npm/:_authToken=${NPM_TOKEN}"
          echo "//gitlab.tesodev.com/api/v4/projects/16/packages/npm/:_authToken=${NPM_TOKEN}"
        } >> .npmrc
      fi
    - echo "Created the following .npmrc:"; cat .npmrc

    # Extract a few values from package.json
    - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
    - NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version")

    # Compare the version in package.json to all published versions.
    # If the package.json version has not yet been published, run `npm publish`.
    # If $SIGSTORE_ID_TOKEN is set this template will generate a provenance
    # document. For more information refer to the documentation: https://docs.gitlab.com/ee/ci/yaml/signing_examples/
    - |
      if [[ "$(npm view ${NPM_PACKAGE_NAME} versions)" != *"'${NPM_PACKAGE_VERSION}'"* ]]; then
        npm publish
        echo "Successfully published version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} to GitLab's NPM registry: ${CI_PROJECT_URL}/-/packages"
      else
        echo "Version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} has already been published, so no new version has been published."
      fi